Srand(pid); para generar una secuencia random
rand();para que devuelva un numero random

Principal
//Includes
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
...
#define NUM_CLIENTES 30;

//dentro de un main(){}

//Variables necesarias
int llega10;

//Prepararse señales 10 y 12
signal(10,f10);
signal(12,f12);
void f10()
{
	llega10=1;
}
void f12()
{
	prinf("Error: el servidor grafico no ha podido arrancar...\n");
	exit(-1);
}

//inicialiar semilla rand
srand(getpid());

//Crear el servidor grafico

int pidSG=fork();

if (pidSG==-1)
{
	prinf("Error: FORK del servidor ncurses...\n");
	exit(-1);
}
else if (pidSG==0)
{
	execl("servidor_ncurses","servidor_ncurses","NULL"); // si ponemos "5" entre null y el  nombre habra 5 colas.
	prinf("Error: EXECL del servidor ncurses...\n");
	exit(-1);
}
//esperar respuesta del servidor
if(!llega10)
{
	pause();
}
//Crear NUM_CLIENTES=30;
for (int i=0; i<NUM_CLIENTES; i++)
{
	int pidCL=fork();
	if (pidCL==-1)
	{
		prinf("Error: FORK del Cliente...\n");
		exit(-1);
	}
	else if (pidSG==0)
	{
		execl("cliente","cliente","NULL");
		prinf("Error: EXECL del cLiente...\n");
		exit(-1);
	}
//esperando tiempo aleatorio entre ellos
	sleep(rand()%5+1);  // entre 0 y 4 +1 osea 1 a 5	
}
//esperar a todos los clientes
for(int i=0; i<30; i++)
	wait(NULL);
//Esperar 5 segundos para visualizar la pantalla (no es util)
sleep(5); 
//Mandar finalizacion
kill(pidSG,12);
//Reset del Sistema

----------------------------------------------------------------
Cliente
//Includes
#include <stdio.h>

//dentro de un main(){}

//Variables necesarias
int llega10;
//Prepararse para recibir la señal 10
void f10()
{
	llega10=1;
}
//inicialiar semilla rand
srand(getpid());

//Abrir la cola de mensajes para el servidor grafico
key_t keyCola = ftok("./fichcola.txt", 18);
int idCola=crea_cola(keyCola);

//Generar aleatoriamente parada origen y destino siendo estas distintas
int origen=rand()%6+1;
int destino=rand()%6+1;
while (origen == destino)
{
	int destino=rand()%6+1;
}

//Pintamos en la parada origen
struct tipo elemento cl1;
cl1.tipo=2;
cl1.pid=getpid();
cl1.parada=origen;
cl1.inout=IN;
cl1.pintaborra=PINTAR; <----
cl1.destino=destino;

msgsnd(idCola, (struct tipo_elemento *) &cl1,sizeof(cl1) - sizeof(long), 0);//pinta origen

if(!llega10)
{
	pause();
}
llega10=0;

//esperamos un tiempo
sleep(rand()%4+2);

//borramos parada origen

cl1.tipo=2;
cl1.pid=getpid();
cl1.parada=origen;
cl1.inout=IN;
cl1.pintaborra=BORRAR; <----
cl1.destino=destino;

msgsnd(idCola, (struct tipo_elemento *) &cl1,sizeof(cl1) - sizeof(long), 0);//borra

//esperamos un tiempo
sleep(rand()%4+2);

//Pintamos parada de destino

cl1.tipo=2;
cl1.pid=getpid();
cl1.parada=destino; <---
cl1.inout=OUT;
cl1.pintaborra=PINTAR; <---
cl1.destino=destino;

msgsnd(idCola, (struct tipo_elemento *) &cl1,sizeof(cl1) - sizeof(long), 0);//pinta destino

--------------------------------------------------------------------------------------------------

con este comando convertimos un int definido como NUM_PARADAS por ejemplo en un string 
sprintf(cadNP,"%d",NUM_PARADAS);







