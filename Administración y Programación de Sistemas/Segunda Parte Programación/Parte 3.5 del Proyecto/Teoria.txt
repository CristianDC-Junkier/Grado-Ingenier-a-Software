mejoramos algunas cosas en principal y cliente

//CLIENTE
//visualiza un cliente (pintar o borrar)
void visualiza(int cola, int parada, int inout, int pintaborra, int destino)
{
	struct tipo_elemento cll;
	cll.tipo=2;
	cll.pid=getpid();
	cll.parada=parada;
	cll.inout=intout;
	cll.pintaborra=pintaborra;
	cll.destino=destino;

	msgsnd(cola, (struct tipo_elemento *) &cll, sizeof(cll)-sizeof(long),0);
	if(pintaborra == PINTAR)
	{
		if(!llega10)
			pause();
		llega10=0;
	}	
}

---------------------------------------------------------------------------------------------------------------------------------

//PRINCIPAL
//Crear servidor grafico
int creaservidorgrafico()
{
	char cadNP[10];
	sprintf(cadNP, "%d" , NUM_PARADAS);

	int pidSG=fork();

	if (pidSG==-1)
	{
		prinf("Error: FORK del servidor ncurses...\n");
		exit(-1);
	}
	else if (pidSG==0)
	{
		execl("servidor_ncurses","servidor_ncurses","NULL"); // si ponemos "5" entre null y el  nombre habra 5 colas.
		prinf("Error: EXECL del servidor ncurses...\n");
		exit(-1);
	}

	return pidSG;
}

//Crear Procesos: crea el proceso pasado por parametros
void creaproceso(const char nombre[])
{
	int pidCL=fork();
	if (pidCL==-1)
	{
		prinf("Error: FORK del Cliente...\n");
		exit(-1);
	}
	else if (pidSG==0)
	{
		execl(nombre,nombre,"NULL");
		prinf("Error: EXECL del Cliente...\n");
		exit(-1);
	}
}


-------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------Version 3-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------


Creación del Bus.

//el cliente y el autobus van a tener que comunicarse por una cola de mensajes
//el autobus (proceso) es creado por el principal con la señal 12
//la cola del bus es 20 y la de clientes es 18
//el bus elimina la cola de mensajes 20 
//el autobus espera una señal 10 para asegurarse que fue pintando
//el autobus le manda la señal 12 al cliente, para que se suba al mismo
//para el control de las paradas se utilizaran 6 fifos, donde el bus escribira y el cliente leera


comun.h
//estructura (mensaje) para conectar bus con el cliente

struct tipo_parada{
	long tipo; //parada de origen
	int pid; //pid del proceso
	int destino; //parada destino
}

bus.h

char nombre[10];
int fifos[NUM_PARADAS+1];
montados[NUM_PARADAS+1];
int testigos=1;

//pintar autobus
void visualiza(int cola, int parada)
{
	struct tipo_elemento cll;
	cll.tipo=1;
	cll.pid=getpid();
	cll.parada=parada;
	cll.inout=IN;
	cll.pintaborra=PINTAR;
	cll.destino=0;

	msgsnd(cola, (struct tipo_elemento *) &cll, sizeof(cll)-sizeof(long),0);

	if(!llega10)
		pause();
	llega10=0;
}

//Variables necesarias
int llega10;

//prepararse para la señal 10 y 12
signal(10,f10);
signal(12,f12);

//inicialiar semilla rand
srand(getpid());

//Abrir la cola de mensajes para el bus para pintarse
key_t keyCola = ftok("./fichcola.txt", 18);
int idCola=crea_cola(keyCola);

//Abrir la cola de mensajes con clientes
key_t keyColaBus = ftok("./fichcola.txt", 20);
int idColaBus=crea_cola(keyColaBus);

//abro fifos
for (int i=1; i<=NUM_PARADAS; i++)
{
	sprintf(nombre, "fifo%d", i)
	fifos[i]=open(nombre,O_WRONLY);
}
//Inicializar montados de cada parada
for (int i=1; i<=NUM_PARADAS; i++)
{
	montados[i]=0;
}
//Mientras siempre
int i,x;
while(1)
{
	//recorremos cada parada y en cada una:
	for(i = 1; i<=NUM_PARADAS; i++)
	{
		pinta(idCola,i);//pintamos bus
		for(x = 1; x<=montados[i];x++)//bajamos a la gente
			{
			write(fifo[i], &testigo, sizeof(int));
			libres++;
			usleep(RETARDO);//sleep pero mas pequeño
			}
		montados[i]=0;//ponemos su i a 0
		while(libres > 0 && (-1!=msgrcv(idColaBus,(struct tipo_parada *)&cl,sizeof(cl)-sizeof(long),i,IP0_NOWAIT)))//montamos a la gente
			{
			//Aviso al cliente
			kill(cl.pid,12);
			libres--;
			montados[cl.destino]++;
			usleep(RETARDO);
			}
		if(i==NUM_PARADAS)
			pinta(idCola,NUM_PARADAS*10+1); //La ultima
		else
			pinta(idCola,i*10+i+1); //las demas
	//se espera un tiempo
	sleep(3);
	}
}

//finalizacion del bus f12
void f12() 
{
	//elimina cola bus-cliente
	msgctl(idColaBus,IPC_RMID,0);
}

//Bucle bus
while(1)
{ 
pinta(idCola,1); 
sleep(2); 
pinta(idCola,12);
sleep(2);
pinta(idCola,2); 
sleep(2); 
pinta(idCola,23);
sleep(2);
pinta(idCola,3); 
sleep(2); 
pinta(idCola,34);
sleep(2);
pinta(idCola,4); 
sleep(2); 
pinta(idCola,45);
sleep(2);
pinta(idCola,5); 
sleep(2); 
pinta(idCola,56);
sleep(2);
pinta(idCola,6); 
sleep(2); 
pinta(idCola,61);
sleep(2);
}



------------------------------------
principal
//crear bus
int pidBUS=creaproceso("bus");

//finalizacion del bus
kill(pidBUS,12)

//creo fifos y abro
for (int i=1; i<=NUM_PARADAS; i++)
{
	sprintf(nombre, "fifo%d", i)
	unlink(nombre);//por si existen, si no, lo comentamos
	mkfifo(nombre,0600);
	fifos[i]=open(nombre,O_RDWR);
}
-------------------------
cliente.c

char fifo[10];
//Abrir la cola de mensajes con el bus 
key_t keyColaBus = ftok("./fichcola.txt", 20);
int idColaBus=crea_cola(keyColaBus);

//despues de saber el origen y el destino
//abrimos la fifo en modo lectura
sprintf(fifo,"fifo%d",destino);
int idFifo=open(fifo, 0_RDONLY);

//informacion a la cola para el bus
cl1.tipo=origen;
cl1.pid=getpid();
cl1.destino=destino;

msgnd(idColaBus,(struct tipo_parada *) &cl1, sizeof(cl1)-sizeof(long),0);

//pintamos la cola

visualizar(idCola, origen, IN, PINTAR, destino);

//esperamos a que llegue la señal 12
if (llega12!=1)
{
	pause();
}
llega12=0;

//Borramos de la parada origen
visualiza(idCola, origen, IN, BORRAR, destino);

//pintamos en el bus
visualizar(idCola, 0 , OUT , PINTAR, destino); //parada 0 es el bus y OUT de las paradas

//esperamos la lectura de la fifo
read(idFifo, &testigo, sizeof(int));

//borramos del autobus
visualiza(idCola, 0, OUT, BORRAR, destino);

//pintamos en la parada destino
visualiza(idCola, destino, IN, PINTAR, destino);

//cerramos la conexion con la fifo
close(idFifo);




























